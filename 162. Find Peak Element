// Iterative Search: Brute Force
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int N = nums.size() - 1; 
        if (nums.size() == 1) return 0; 
        if (nums[0] > nums[1]) return 0; 
        if (nums[N-2] < nums[N-1]) return N-1; 
        for (int i = 1; i < nums.size() - 1; i++) {    
            if (nums[i] > nums[i-1] && nums[i] > nums[i+1]) return i; 
        }
        return -1; 
    }
};

// Binary Search: 
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int low = 0; 
        int high =  nums.size() - 1; 
        int mid; 
        if (nums.size() == 1) return 0;  
        if (nums[0] > nums[1]) return 0; 
        if (nums[high-1] < nums[high]) return high;
        low++; 
        high--; 
        while (low <= high) {
            mid = low + (high - low) / 2 ;
            if (nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]) {
                return mid; 
            }
            else if (nums[mid] > nums[mid-1]) {
                low = mid + 1; 
            }
            // Below staement can be removed or changed with an else statements:
            else if (nums[mid] > nums[mid+1]) {
                high = mid - 1; 
            }
            else {
                low = mid + 1; 
            }
        } 
        return -1; 
    }
};
