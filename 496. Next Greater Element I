// Brute Force: 
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans; 
        int temp; 
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) { 
                if (nums2[j] == nums1[i]) {
                    temp = j; 
                    break;
                }
            }
            bool found = false;
            for (int i = temp+1; i < nums2.size(); i++) {
                if (nums2[i] > nums2[temp]) {
                    temp = nums2[i]; 
                    ans.push_back(temp); 
                    found = true;
                    break; 
                }
            }
            if (!found) ans.push_back(-1); 
        }
        return ans; 
    }
};

// Optimal Approach: Using a stack and an array to to store and check elements: 
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        // traverse the elements from back
        stack <int> temp;  
        vector <int> ans; 
        for (int i = nums2.size() - 1; i >= 0; i--) {
            while (!temp.empty() && temp.top() <= nums2[i]) {
                temp.pop(); 
            }
            if (temp.empty()) ans.push_back(-1); 
            else ans.push_back(temp.top());
            temp.push(nums2[i]); 
        }
        reverse (ans.begin(), ans.end()); 
        vector <int> result; 
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                if (nums1[i] == nums2[j]) {
                    result.push_back(ans[j]); 
                    break; 
                }
            }
        }
        return result; 
    }
};
