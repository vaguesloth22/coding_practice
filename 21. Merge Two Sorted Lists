class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode * temp1 = list1; 
        ListNode * temp2 = list2; 
        ListNode * new_head = new ListNode(101); 
        ListNode * curr = new_head; 
        while (temp1 != nullptr && temp2 != nullptr) {
            if (temp1->val >= temp2->val) {
                curr->next = temp2; 
                temp2 = temp2->next;  
            }
            else {
                curr->next = temp1; 
                temp1 = temp1->next; 
            }
            curr = curr->next; 
        }
        if (temp1) curr->next = temp1; 
        if (temp2) curr->next = temp2; 
        return new_head->next; 
    }
};
// Similar approach: 
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if (!list1) return list2; 
        if (!list2) return list1; 

        ListNode * head; 
        ListNode * tail;

        if (list1->val < list2->val) {
            head = list1; 
            tail = list1; 
            list1 = list1->next; 

        } else {
            head = list2; 
            tail = list2; 
            list2 = list2->next; 
        }
        while (list1 && list2) {
            if (list1->val < list2->val) {
                tail->next = list1; 
                list1 = list1->next; 
            } else {
                tail->next = list2; 
                list2 = list2->next; 
            }
            tail = tail->next; 
        }
        if (list1) {
            tail->next = list1; 
        } else {
            tail->next = list2; 
        }
        return head; 
    }
};
// Recursive Approach: GFG
class Solution {
  public:
    Node * merge(Node * head, Node * tail, Node * head1, Node * head2) {
        if (!head1) {
            tail->next = head2;  
            return head; 
        }
        if (!head2) {
            tail->next = head1; 
            return head;
        }
        if (head1->data <= head2->data) {
            tail->next = head1; 
            return merge(head, tail->next, head1->next, head2); 
        } else {
            tail->next = head2; 
            return merge(head, tail->next, head1, head2->next); 
        }
    }
    Node* sortedMerge(Node* head1, Node* head2) {
        // code here
        Node * head; 
        Node * tail; 
        if (head1->data <= head2->data) {
            head = head1; 
            tail = head1; 
            head1 = head1->next; 
        } else {
            head = head2; 
            tail = head2; 
            head2 = head2->next; 
        }
        return merge(head, tail, head1, head2); 
        
    }
};


