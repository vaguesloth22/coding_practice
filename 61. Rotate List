// Key is to make sure that you are traversing to the correct index before breaking the linked list. Also attach the tail to the head to form the rotated linked list. 
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (!head || !head->next || k == 0) return head;

        ListNode * ptr = head;
        int n = 0, i = 0; 
        while (ptr) {
            n++; 
            ptr = ptr->next; 
        }
        k = k % n; 
        if (k == 0) return head; 

        ptr = head; 
        while (i < n - k - 1) {
            ptr = ptr->next; 
            i++; 
        }
        ListNode * new_head = ptr->next;  
        ptr->next = nullptr; 

        ListNode * temp = new_head; 
        while (temp->next) {
            temp = temp->next; 
        }
        temp->next = head; 
        return new_head; 
    }
};
