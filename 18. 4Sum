// Better Approach: O(n^3) using two pointer
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size(); 
        sort(nums.begin(), nums.end()); 
        set<vector<int>> answer; 
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int c = j + 1; 
                int d = n - 1; 
                while (c < d) {
                    long long sum = nums[i] + nums[j];
                    sum += nums[c];
                    sum += nums[d]; 
                    if (sum == target) {
                        vector <int> temp = {nums[i], nums[j], nums[c], nums[d]}; 
                        sort(temp.begin(), temp.end()); 
                        answer.insert(temp); 
                        c++; 
                        d--; 
                    } else if (sum > target) {
                        d--; 
                    } else {
                        c++; 
                    }
                }
            }
        }
        vector<vector<int>> result (answer.begin(), answer.end()); 
        return result; 
    }
};
