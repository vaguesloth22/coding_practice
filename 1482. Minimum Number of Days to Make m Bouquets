class Solution {
public:
    bool chk(vector<int> &bloomDay, int day, int k, int m) {
        int cnt = 0, ans = 0; 
        for (int i = 0; i < bloomDay.size(); i++) {
            if (bloomDay[i] <= day) {
                cnt++; 
            }
            else {
                ans += cnt/k; 
                cnt = 0; 
            }
        }
        ans += (cnt/k); 
        if (ans >= m) {
            return true; 
        }
        return false; 
    }
    int minDays(vector<int>& bloomDay, int m, int k) {
        if (1LL * m * k > bloomDay.size()) {    // Cast to long long
            return -1; 
        }
        auto min_it = min_element(bloomDay.begin(), bloomDay.end()); // returns iterator to min
        auto max_it = max_element(bloomDay.begin(), bloomDay.end()); // returns iterator to max 
        int low = *min_it; 
        int high = *max_it; 
        int day = -1; 
        while (low <= high) {
            int mid = low + (high - low) / 2; 
            if (chk(bloomDay, mid, k, m)) {
                day = mid; 
                high = mid - 1; 
            }
            else {
                low = mid + 1; 
            }
        }
        return day;
    }
};
