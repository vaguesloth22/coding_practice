class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        sort(piles.begin(), piles.end()); 
        int n = piles.size() - 1; 
        int low = 1; 
        int high =  piles[n];
        int result = high; 
        while (low <= high) {
            long long eat = 0; 
            int mid = low + (high - low) / 2; 
            for (int i = 0; i < piles.size(); i++) {
                if (piles[i]%mid != 0) {
                    eat += piles[i]/mid; 
                    eat++; 
                }
                else {
                    eat += piles[i]/mid; 
                }
            }
            if (eat <= h) {
                result = mid; 
                high = mid - 1; 
            }
            else {
                low = mid + 1; 
            }
        } 
        return result; 
    }
};
