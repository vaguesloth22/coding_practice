// Brute Force approach: using array 
class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] <= k) {
                k++; 
            }
            else {
                break;
            }
        }
        return k; 
    }
};
// Binary Search: 
class Solution {
public:
    int bs(int low, int high, vector<int> &arr, int k) {
        if (low > high) {
            if (high < 0) return k; 
            int x = k - (arr[high] - high - 1); 
            return arr[high] + x; 
        }
        int mid = low + (high - low) / 2; 
        int missing = arr[mid] - mid - 1; 
        if (missing < k) {
            low = mid + 1; 
            return bs(low, high, arr, k); 
        } else {
            high = mid - 1; 
            return bs(low, high, arr, k); 
        }
    }
    int findKthPositive(vector<int>& arr, int k) {
        int low = 0; 
        int high = arr.size() - 1; 
        return bs(low, high, arr, k); 
    }
};
