/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        stack<int> st; 
        ListNode * ptr = head; 
        while (ptr != nullptr) {
            st.push(ptr->val); 
            ptr = ptr->next; 
        }
        //
        ptr = head; 
        while (ptr != nullptr) {
            ptr->val = st.top(); 
            st.pop(); 
        }
        return head; 
    }
};

// Two pointer approach: Coding Ninjas
Node* reverseLinkedList(Node *head)
{
    // Write your code here
    Node * prev = nullptr; 
    Node * front;  
    Node * temp = head; 
    while (temp != nullptr) {
        front = temp->next; 
        temp->next = prev; 
        prev = temp; 
        temp = front; 
    }
    return prev; 
}
// Using Recursive approach: 
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return head; 
        }
        ListNode * new_head = reverseList(head->next);
        head->next->next = head; 
        head->next = nullptr; 
        return new_head;
    }
};

