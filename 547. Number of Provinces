class Solution {
public:
    int sum = 0; 
    void bfs (vector<bool>&visited, vector<vector<int>>&adj, queue<int>&q) {
        if (q.empty()) {
            return;
        }
        int x = q.front(); 
        q.pop(); 
        for (auto it: adj[x]) {
            if (visited[it] == false) {
                visited[it] = true; 
                q.push(it); 
            }
        }
        bfs(visited, adj, q); 
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int V = isConnected.size(); 
        vector<vector<int>> adj (V); 
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (i != j && isConnected[i][j] == 1) adj[i].push_back(j); 
            }
        }
        vector <bool> visited (V, false);
        queue<int>q; 
        for (int i = 0; i < V; i++) {
            if (visited[i] == false) {
                sum++; 
                visited[i] = true; 
                q.push(i); 
                bfs(visited, adj, q); 
            }
        }
        return sum; 
    }
};
